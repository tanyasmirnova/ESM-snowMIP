README:  Version 2018-09-12

Manning from UCAR: I've tried to do some careful documentation in the code of
simple_driver.F, in order to be as clear as possible about what I
think is going on.  I've tried describe particularly the input to and
output from SFLX.  Please let me know of any necessary corrections.

Source code:

    The main driver code is "simple_driver.F".  
    The RUC LSM code is in file "module_sf_ruclsm.F"; the
    main interface to this code is the call to subroutine LSMRUC in the
    driver.  Other source-code files handle utility codes and details
    of the I/O procedures.

Note on NetCDF libraries:

    This code requires that the NetCDF libraries are installed on
    your machine.  In general, the code provided here should be
    compiled with the same compiler used to create the NetCDF
    libraries.  

To compile:

    Edit the user_build_options to choose compiler, compiler options,
    libraries, etc.  Adjust compiler options and library paths as 
    necessary from the default settings provided in user_build_options.

    Invoke "make" to compile.  This should create executable file
    "driver.exe".  Note that the Makefile included here is set up
    for the GNU make utility.  If "make" does not work on your
    system, try "gmake". 

To run:

    execute:
      "driver.exe *.dat"
To run with the FPE model execute:
      "driver.exe *.dat FPE.para"

Input file:

    The forcing data and initial data are combined in a single file
    "*.dat" for each of SnowMIP sites.  A namelist section in 
    that file describes site parameters and initial conditions. The
    namelist is followed by records of forcing fields.
    FPE.para specifies parameters for the FPE model.

Output file:

    The program is set up to create both ASCII and NetCDF
    output. Output will go to files "OUTPUT.txt" and "OUTPUT.nc".  At
    the driver level, the code to add or remove variables in the
    output files is easily adaptable.  See (in the driver code) the
    calls to subroutines output_levels and output_var.
